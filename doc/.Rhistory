MWS_ex
EAP_ex
HPL_ex
MWS_ex
# We generate dataframes that include the sentimentr sentiment calculated
# for each individual author.
EAP_sentiments <-
EAP$text %>%
get_sentences() %>%
sentiment()
HPL_sentiments <-
HPL$text %>%
get_sentences() %>%
sentiment()
MWS_sentiments <-
MWS$text %>%
get_sentences() %>%
sentiment()
max_EAP_sentiment <- max(EAP_sentiments$sentiment)
max_HPL_sentiment <- max(HPL_sentiments$sentiment)
max_MWS_sentiment <- max(MWS_sentiments$sentiment)
max_EAP_sentence <- EAP$text[max_EAP_id]
max_EAP_sentiment <- max(EAP_sentiments$sentiment)
max_HPL_sentiment <- max(HPL_sentiments$sentiment)
max_MWS_sentiment <- max(MWS_sentiments$sentiment)
min_EAP_sentiment <- min(EAP_sentiments$sentiment)
min_HPL_sentiment <- min(HPL_sentiments$sentiment)
min_MWS_sentiment <- min(MWS_sentiments$sentiment)
max_EAP_id <- as.integer(filter(EAP_sentiments, EAP_sentiments$sentiment == max_EAP_sentiment)[1])
max_HPL_id <- as.integer(filter(HPL_sentiments, HPL_sentiments$sentiment == max_HPL_sentiment)[1])
max_MWS_id <- as.integer(filter(MWS_sentiments, MWS_sentiments$sentiment == max_MWS_sentiment)[1])
min_EAP_id <- as.integer(filter(EAP_sentiments, EAP_sentiments$sentiment == min_EAP_sentiment)[1])
min_HPL_id <- as.integer(filter(HPL_sentiments, HPL_sentiments$sentiment == min_HPL_sentiment)[1])
min_MWS_id <- as.integer(filter(MWS_sentiments, MWS_sentiments$sentiment == min_MWS_sentiment)[1])
max_EAP_sentence <- EAP$text[max_EAP_id]
max_HPL_sentence <- HPL$text[max_HPL_id]
max_MWS_sentence <- MWS$text[max_MWS_id]
min_EAP_sentence <- EAP$text[min_EAP_id]
min_HPL_sentence <- HPL$text[min_HPL_id]
min_MWS_sentence <- MWS$text[min_MWS_id]
max_EAP_sentence
max_HPL_sentence
max_MWS_sentence
min_EAP_sentence
min_HPL_sentence
min_MWS_sentence
# These formality objects contain an immense amount of information.
EAP_formality <- formality(EAP_sample$., order.by.formality = TRUE)
HPL_formality <- formality(HPL_sample$., order.by.formality = TRUE)
MWS_formality <- formality(MWS_sample$., order.by.formality = TRUE)
EAP_formality$formality$formality
HPL_formality$formality$formality
MWS_formality$formality$formality
# In order to make a corpus that we can do topic modelling on,
# we have to do some pre-processing on Spooky and the author datasets.
spooky_preproc <-
spooky %>%
mutate(doc_id = id) %>%
select(-id) %>%
.[c("doc_id", "text", "author")]
EAP_preproc <-
spooky_preproc %>%
filter(author == "EAP") %>%
select(-author)
HPL_preproc <-
spooky_preproc %>%
filter(author == "HPL") %>%
select(-author)
MWS_preproc <-
spooky_preproc %>%
filter(author == "MWS") %>%
select(-author)
# Create the individual Dataframe Source objects, required to instantiate a tm Corpus.
spooky_DfS <- DataframeSource(spooky_preproc)
EAP_DfS <- DataframeSource(EAP_preproc)
HPL_DfS <- DataframeSource(HPL_preproc)
MWS_DfS <- DataframeSource(MWS_preproc)
spooky_corpus <- Corpus(spooky_DfS)
EAP_corpus <- Corpus(EAP_DfS)
HPL_corpus <- Corpus(HPL_DfS)
MWS_corpus <- Corpus(MWS_DfS)
# For each, we'll retain an unedited version so we can look at
# sentence originals once we assign topics.
spooky_corpus_cop <- spooky_corpus
EAP_corpus_cop <- EAP_corpus
HPL_corpus_cop <- HPL_corpus
MWS_corpus_cop <- MWS_corpus
# I tried to notate this using a for loop and also using the pipeline notation,
# but wasn't successful, so that's why it looks so clunky.
spooky_corpus <- tm_map(spooky_corpus, content_transformer(tolower))
spooky_corpus <- tm_map(spooky_corpus, removePunctuation)
spooky_corpus <- tm_map(spooky_corpus, removeNumbers)
spooky_corpus <- tm_map(spooky_corpus, removeWords, stopwords("english"))
spooky_corpus <- tm_map(spooky_corpus, stripWhitespace)
EAP_corpus <- tm_map(EAP_corpus, content_transformer(tolower))
EAP_corpus <- tm_map(EAP_corpus, removePunctuation)
EAP_corpus <- tm_map(EAP_corpus, removeNumbers)
EAP_corpus <- tm_map(EAP_corpus, removeWords, stopwords("english"))
EAP_corpus <- tm_map(EAP_corpus, stripWhitespace)
HPL_corpus <- tm_map(HPL_corpus, content_transformer(tolower))
HPL_corpus <- tm_map(HPL_corpus, removePunctuation)
HPL_corpus <- tm_map(HPL_corpus, removeNumbers)
HPL_corpus <- tm_map(HPL_corpus, removeWords, stopwords("english"))
HPL_corpus <- tm_map(HPL_corpus, stripWhitespace)
MWS_corpus <- tm_map(MWS_corpus, content_transformer(tolower))
MWS_corpus <- tm_map(MWS_corpus, removePunctuation)
MWS_corpus <- tm_map(MWS_corpus, removeNumbers)
MWS_corpus <- tm_map(MWS_corpus, removeWords, stopwords("english"))
MWS_corpus <- tm_map(MWS_corpus, stripWhitespace)
# See how the sample sentence has been changed.
writeLines(as.character(MWS_corpus[[666]]))
# Now, we create tm document term matrix objects for each of the texts,
# and we'll input this into LDA.
spooky_DTM <- DocumentTermMatrix(spooky_corpus)
EAP_DTM <- DocumentTermMatrix(EAP_corpus)
HPL_DTM <- DocumentTermMatrix(HPL_corpus)
MWS_DTM <- DocumentTermMatrix(MWS_corpus)
# This is pretty slow!
# I've split up what might have been a single code snippet
# into tiny pieces, so that we can make sure to only run the row total
# generation a single time.
spooky_row_totals <- apply(spooky_DTM, 1, sum)
EAP_row_totals <- apply(EAP_DTM, 1, sum)
HPL_row_totals <- apply(HPL_DTM, 1, sum)
MWS_row_totals <- apply(MWS_DTM, 1, sum)
# This doesn't take long
spooky_empty_rows <- spooky_DTM[spooky_row_totals == 0, ]$dimnames[1][[1]]
EAP_empty_rows <- EAP_DTM[spooky_row_totals == 0, ]$dimnames[1][[1]]
HPL_empty_rows <- HPL_DTM[spooky_row_totals == 0, ]$dimnames[1][[1]]
MWS_empty_rows <- MWS_DTM[spooky_row_totals == 0, ]$dimnames[1][[1]]
spooky_corpus <- spooky_corpus[-as.numeric(spooky_empty_rows)]
EAP_corpus <- EAP_corpus[-as.numeric(EAP_empty_rows)]
HPL_corpus <- HPL_corpus[-as.numeric(HPL_empty_rows)]
MWS_corpus <- MWS_corpus[-as.numeric(MWS_empty_rows)]
# We'll remove these sentences from the copy corpora as well,
# so that we are more easily able to look up sentences in their full,
# unedited form.
spooky_corpus_cop <- spooky_corpus_cop[-as.numeric(spooky_empty_rows)]
EAP_corpus_cop <- EAP_corpus_cop[-as.numeric(EAP_empty_rows)]
HPL_corpus_cop <- HPL_corpus[-as.numeric(HPL_empty_rows)]
MWS_corpus_cop <- MWS_corpus[-as.numeric(MWS_empty_rows)]
spooky_DTM <- DocumentTermMatrix(spooky_corpus)
EAP_DTM <- DocumentTermMatrix(EAP_corpus)
HPL_DTM <- DocumentTermMatrix(HPL_corpus)
MWS_DTM <- DocumentTermMatrix(MWS_corpus)
# Gibbs sampling parameters
burn_in <- 4000
iteration <- 2000
thin_factor <- 500
seed <- sample(25000, 5)
start_num <- 5
best <- TRUE
# LDA parameters
topic_num <- 10
# This takes a long time.
# The object produced is more than 10 Mb.
spooky_LDA_Out <- LDA(spooky_DTM, topic_num,
method = "Gibbs",
control = list(
nstart = start_num,
seed = seed,
best = best,
burnin = burn_in,
iter = iteration,
thin = thin_factor))
pdf("../figs/EAP_common_wordcloud.pdf")
wordcloud(EAP_words_ranked$.,
EAP_words_ranked$Freq,
scale = small_scale,
max.words = num_words,
colors = EAP_seq_colors)
dev.off()
png("../figs/EAP_common_wordcloud.png")
wordcloud(EAP_words_ranked$.,
EAP_words_ranked$Freq,
scale = small_scale,
max.words = num_words,
colors = EAP_seq_colors)
dev.off()
pdf("../figs/HPL_common_wordcloud.pdf")
wordcloud(HPL_words_ranked$.,
HPL_words_ranked$Freq,
scale = small_scale,
max.words = num_words,
colors = HPL_seq_colors)
dev.off()
png("../figs/HPL_common_wordcloud.png")
wordcloud(HPL_words_ranked$.,
HPL_words_ranked$Freq,
scale = small_scale,
max.words = num_words,
colors = HPL_seq_colors)
dev.off()
pdf("../figs/MWS_common_wordcloud.pdf")
wordcloud(MWS_words_ranked$.,
MWS_words_ranked$Freq,
scale = small_scale,
max.words = num_words,
colors = MWS_seq_colors)
dev.off()
png("../figs/MWS_common_wordcloud.png")
wordcloud(MWS_words_ranked$.,
MWS_words_ranked$Freq,
scale = small_scale,
max.words = num_words,
colors = MWS_seq_colors)
dev.off()
pdf("../figs/EAP_mid_wordcloud.pdf")
wordcloud(mid_EAP$., mid_EAP$Freq, scale = constant_scale, max.words = num_words, colors = EAP_seq_colors)
dev.off()
png("../figs/EAP_mid_wordcloud.png")
wordcloud(mid_EAP$., mid_EAP$Freq, scale = constant_scale, max.words = num_words, colors = EAP_seq_colors)
dev.off()
pdf("../figs/HPL_mid_wordcloud.pdf")
wordcloud(mid_HPL$., mid_HPL$Freq, scale = constant_scale, max.words = num_words, colors = HPL_seq_colors)
dev.off()
png("../figs/HPL_mid_wordcloud.png")
wordcloud(mid_HPL$., mid_HPL$Freq, scale = constant_scale, max.words = num_words, colors = HPL_seq_colors)
dev.off()
pdf("../figs/MWS_mid_wordcloud.pdf")
wordcloud(mid_MWS$., mid_MWS$Freq, scale = constant_scale, max.words = num_words, colors = MWS_seq_colors)
dev.off()
png("../figs/MWS_mid_wordcloud.png")
wordcloud(mid_MWS$., mid_MWS$Freq, scale = constant_scale, max.words = num_words, colors = MWS_seq_colors)
dev.off()
?png
g_EAP_gen_pron <- ggplot(EAP_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns, EAP") +
blank_theme
g_EAP_gen_pron <- ggplot(EAP_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns, EAP") +
blank_theme()
blank_theme <- theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank())
g_total_gen_pron <- ggplot(total_gender_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns in Spooky Dataset") +
blank_theme
spooky_gender_pron <-
spooky_words %>%
select(-id) %>%
filter(word == "she" | word == "her" | word == "hers" |
word == "he" | word == "him" | word == "his")
total_gender_pron <-
count(spooky_gender_pron, word)
# How many total gender pronouns?
total_pron <- sum(total_gender_pron$n)
# Normalize so we get percentages.
total_gender_pron <-
total_gender_pron %>%
mutate(percent = n/total_pron) %>%
select(-n)
# Change automatic alphabetical ordering so that we can easily plot
# the female pronouns as a group against the male.
total_gender_pron <-
total_gender_pron %>%
mutate(word = factor(word, levels=c("she","her","hers","he","him","his"))) %>%
arrange(word)
blank_theme <- theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank())
g_total_gen_pron <- ggplot(total_gender_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns in Spooky Dataset") +
blank_theme
g_total_gen_pron
png("../figs/g_total_gen_pron.png")
g_total_gen_pron
dev.off()
EAP_pron <-
spooky_words %>%
filter(author == "EAP") %>%
select(word) %>%
filter(word == "she" | word == "her" | word == "hers" |
word == "he" | word == "him" | word == "his") %>%
count(word)
EAP_tot <- sum(EAP_pron$n)
EAP_pron <-
EAP_pron %>%
mutate(percent = n/EAP_tot) %>%
select(-n) %>%
mutate(word = factor(word, levels=c("she","her","hers","he","him","his"))) %>%
arrange(word)
HPL_pron <-
spooky_words %>%
filter(author == "HPL") %>%
select(word) %>%
filter(word == "she" | word == "her" | word == "hers" |
word == "he" | word == "him" | word == "his") %>%
count(word)
HPL_tot <- sum(HPL_pron$n)
HPL_pron <-
HPL_pron %>%
mutate(percent = n/HPL_tot) %>%
select(-n) %>%
mutate(word = factor(word, levels=c("she","her","hers","he","him","his"))) %>%
arrange(word)
MWS_pron <-
spooky_words %>%
filter(author == "MWS") %>%
select(word) %>%
filter(word == "she" | word == "her" | word == "hers" |
word == "he" | word == "him" | word == "his") %>%
count(word)
MWS_tot <- sum(MWS_pron$n)
MWS_pron <-
MWS_pron %>%
mutate(percent = n/MWS_tot) %>%
select(-n) %>%
mutate(word = factor(word, levels=c("she","her","hers","he","him","his"))) %>%
arrange(word)
g_EAP_gen_pron <- ggplot(EAP_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns, EAP") +
blank_theme()
g_EAP_gen_pron <- ggplot(EAP_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns, EAP") +
blank_theme
g_HPL_gen_pron <- ggplot(HPL_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns, HPL") +
blank_theme
g_MWS_gen_pron <- ggplot(MWS_pron, aes(x = "", y = percent, fill = word)) +
geom_bar(width=1, stat="identity") +
coord_polar("y", start=0) +
ggtitle("Total proportion of gender pronouns, MWS") +
blank_theme
g_EAP_gen_pron
g_HPL_gen_pron
g_MWS_gen_pron
ggsave("../figs/g_EAP_gen_pron.png", g_EAP_gen_pron, device = "png")
ggsave("../figs/g_HPL_gen_pron.png", g_HPL_gen_pron, device = "png")
ggsave("../figs/g_MWS_gen_pron.png", g_MWS_gen_pron, device = "png")
pdf("../figs/EAP_bigram_wordcloud.pdf")
wordcloud(EAP_bigrams$bigram, EAP_bigrams$n, max.words=50, colors=EAP_seq_colors)
dev.off()
png("../figs/EAP_bigram_wordcloud.png")
wordcloud(EAP_bigrams$bigram, EAP_bigrams$n, max.words=50, colors=EAP_seq_colors)
dev.off()
pdf("../figs/HPL_bigram_wordcloud.pdf")
wordcloud(HPL_bigrams$bigram, HPL_bigrams$n, max.words=50, colors=HPL_seq_colors)
dev.off()
png("../figs/HPL_bigram_wordcloud.png")
wordcloud(HPL_bigrams$bigram, HPL_bigrams$n, max.words=50, colors=HPL_seq_colors)
dev.off()
pdf("../figs/MWS_bigram_wordcloud.pdf")
wordcloud(MWS_bigrams$bigram, MWS_bigrams$n, max.words=50, colors=MWS_seq_colors)
dev.off()
png("../figs/MWS_bigram_wordcloud.png")
wordcloud(MWS_bigrams$bigram, MWS_bigrams$n, max.words=50, colors=MWS_seq_colors)
dev.off()
# Create attribute on LDA object that is a matrix,
# where each row is the document number,
# and the one column is topic number,
# so that each entry is the highest probability topic number
# assigned to the corresponding document.
spooky_LDA_Out.topics <- as.matrix(topics(spooky_LDA_Out))
# Create attribute on LDA object that is a matrix,
# where the term_number rows of each column represent that many of
# the top terms associated with that topic.
term_number <- 6
spooky_LDA_Out.terms <- as.matrix(terms(spooky_LDA_Out, term_number))
# "gamma," according to topicmodels documentation, is a matrix that includes
# "parameters of the posterior topic distribution for each document."
# In other words, how likely is it that each document belongs to
# any of the generated topics?
spooky_probs <- as.data.frame(spooky_LDA_Out@gamma)
ind1 <-
spooky_probs[which.max(spooky_probs$V1), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind1]]))
ind2 <-
spooky_probs[which.max(spooky_probs$V2), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind2]]))
ind3 <-
spooky_probs[which.max(spooky_probs$V3), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind3]]))
ind4 <-
spooky_probs[which.max(spooky_probs$V4), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind4]]))
ind5 <-
spooky_probs[which.max(spooky_probs$V5), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind5]]))
ind6 <-
spooky_probs[which.max(spooky_probs$V6), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind6]]))
ind7 <-
spooky_probs[which.max(spooky_probs$V7), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind7]]))
ind8 <-
spooky_probs[which.max(spooky_probs$V8), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind8]]))
ind9 <-
spooky_probs[which.max(spooky_probs$V9), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind9]]))
ind10 <-
spooky_probs[which.max(spooky_probs$V10), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind10]]))
View(spooky_LDA_Out.terms)
spooky_LDA_Out.topics
spooky_LDA_Out.terms
spooky_CTM_Out <- CTM(spooky_DTM, topic_num)
pdf("../figs/EAP_low_wordcloud.pdf")
wordcloud(low_EAP$., low_EAP$Freq, scale = constant_scale, max.words = num_words, colors = EAP_seq_colors)
dev.off()
png("../figs/EAP_low_wordcloud.png")
wordcloud(low_EAP$., low_EAP$Freq, scale = constant_scale, max.words = num_words, colors = EAP_seq_colors)
dev.off()
pdf("../figs/HPL_low_wordcloud.pdf")
wordcloud(low_HPL$., low_HPL$Freq, scale = constant_scale, max.words = num_words, colors = HPL_seq_colors)
dev.off()
png("../figs/HPL_low_wordcloud.png")
wordcloud(low_HPL$., low_HPL$Freq, scale = constant_scale, max.words = num_words, colors = HPL_seq_colors)
dev.off()
pdf("../figs/MWS_low_wordcloud.pdf")
wordcloud(low_MWS$., low_MWS$Freq, scale = constant_scale, max.words = num_words, colors = MWS_seq_colors)
dev.off()
png("../figs/MWS_low_wordcloud.png")
wordcloud(low_MWS$., low_MWS$Freq, scale = constant_scale, max.words = num_words, colors = MWS_seq_colors)
dev.off()
spooky_CTM_Out.topics <- as.matrix(topics(spooky_CTM_Out))
term_number <- 6
spooky_CTM_Out.terms <- as.matrix(terms(spooky_CTM_Out, term_number))
spooky_CTM_probs <- as.data.frame(spooky_CTM_Out@gamma)
ind1 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V1), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind1]]))
ind2 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V2), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind2]]))
ind3 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V3), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind3]]))
ind4 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V4), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind4]]))
ind5 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V5), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind5]]))
ind6 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V6), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind6]]))
ind7 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V7), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind7]]))
ind8 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V8), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind8]]))
ind9 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V9), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind9]]))
ind10 <-
spooky_CTM_probs[which.max(spooky_CTM_probs$V10), ] %>%
row.names() %>%
as.integer
writeLines(as.character(spooky_corpus_cop[[ind10]]))
View(spooky_CTM_Out.terms)
View(spooky_LDA_Out.terms)
